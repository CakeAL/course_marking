//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "comments")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub course_id: i32,
    pub user_id: i32,
    pub comment: Option<String>,
    pub up_votes: Option<i32>,
    pub down_votes: Option<i32>,
    pub created_at: Option<DateTime>,
    pub username: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::course_info::Entity",
        from = "Column::CourseId",
        to = "super::course_info::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CourseInfo,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::course_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CourseInfo.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
